generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models
model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int               @default(0)
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [email], references: [email])
  doctorSpecialty     DoctorSpecialty[]
  doctorSchedule      DoctorSchedule[]
  appointment         Appointment[]

  @@map("doctors")
}

model Patient {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [email], references: [email])
  medicalReport MedicalReport[]
  patientHealth PatientHealth?
  appointment   Appointment[]

  @@map("patients")
}

model Specialty {
  id              String            @id @default(uuid())
  title           String
  icon            String?
  doctorSpecialty DoctorSpecialty[]

  @@map("specialties")
}

model DoctorSpecialty {
  specialtyId String
  specialty   Specialty @relation(fields: [specialtyId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  @@id([specialtyId, doctorId])
  @@map("doctor_specialty")
}

model PatientHealth {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  dateOfBirth         String
  gender              Gender
  bloodGroup          BloodGroup
  hasAllergies        Boolean       @default(false)
  hasDiabetes         Boolean       @default(false)
  smokingStatus       Boolean       @default(false)
  pregnancyStatus     Boolean       @default(false)
  hasPastSurgeries    Boolean       @default(false)
  recentAnxiety       Boolean       @default(false)
  recentDepression    Boolean       @default(false)
  height              String
  weight              String
  dietaryPreferences  String?
  mentalHealthHistory String?
  immunizationStatus  String?
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_healths")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medical_reports")
}

model Schedule {
  id             String           @id @default(uuid())
  startDateTime  DateTime
  endDateTime    DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  doctorSchedule DoctorSchedule[]
  appointment    Appointment?

  @@map("schedules")
}

model DoctorSchedule {
  doctorId      String
  doctor        Doctor   @relation(fields: [doctorId], references: [id])
  scheduleId    String
  schedule      Schedule @relation(fields: [scheduleId], references: [id])
  isBooked      Boolean  @default(false)
  appointmentId String?

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}

model Appointment {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String   @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  videoCallingId String
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("appointments")
}

// enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}
